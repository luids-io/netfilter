# Makefile for release

EMPTY:=
SPACE:=$(EMPTY) $(EMPTY)
COMMA:=$(EMPTY),$(EMPTY)

ifeq (, $(shell which curl))
	$(error "No curl in $$PATH, please install")
endif


NAME:=netfilter
COMMANDS=lunfqueue
VERSION=$(shell git describe --match 'v[0-9]*' --dirty='.m' --always)
LINUX_ARCH:=amd64 arm arm64

# Print output
WHALE = "+"

all:
	@echo Use the 'release' target to build a release.

release: build tar installer

.PHONY: build
build:
	@echo Cleaning old builds
	@rm -rf build && mkdir build
	@echo Building: linux/$(LINUX_ARCH) - $(VERSION) ;\
	for arch in $(LINUX_ARCH); do \
		mkdir -p build/linux/$$arch ; \
		for cmd in $(COMMANDS); do \
		$(MAKE) release COMMAND=$$cmd BINARY=build/linux/$${arch}/$${cmd} \
			SYSTEM="GOOS=linux GOARCH=$$arch" CHECKS="" BUILDOPTS="" ;\
		done ; \
	done

.PHONY: tar
tar:
	@echo Cleaning old releases
	@rm -rf release && mkdir release
	for arch in $(LINUX_ARCH); do \
		tar -zcf release/$(NAME)_$(VERSION)_linux_$$arch.tgz -C build/linux/$$arch . ;\
	done

.PHONY: installer
installer:
	cp deployments/installer/installer.sh release/installer.sh
	sed -i 's/RELEASE="RELEASE"/RELEASE="$(VERSION)"/' release/installer.sh

.PHONY: version
version:
	@echo $(VERSION)

.PHONY: clean
clean:
	rm -rf release
	rm -rf build
